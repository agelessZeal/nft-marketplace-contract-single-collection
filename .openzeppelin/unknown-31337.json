{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x2D5A7f76854f9E7337C120A0F4aCA424bF2A6008",
      "txHash": "0x183a1c997bfc03652d92049d2eb6cb9131c032eea78f937098c4d7e84990d501",
      "kind": "uups"
    }
  ],
  "impls": {
    "7a61fb7d8e01e57c9836af2c3494ee932eba57cc4be2f707d5b2401edede2ea5": {
      "address": "0x63bB9C4E3D04E1dB6eFe6588e060DC0ddAC1C186",
      "txHash": "0x0e89eadf278622d7e86d941e17c23ff0b37773ee0a7e4d77f30abe91bab3bb8c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:37"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:42"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:215"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:81"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:431"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokens",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_ownedTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokens",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "_allTokensIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "contract": "ERC721EnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721URIStorageUpgradeable.sol:24"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721URIStorageUpgradeable.sol:76"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\utils\\ERC721HolderUpgradeable.sol:35"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:68"
          },
          {
            "contract": "NFTMarketplace",
            "label": "_supportedTokens",
            "type": "t_struct(AddressSet)4948_storage",
            "src": "contracts\\NFTMarketPlace.sol:54"
          },
          {
            "contract": "NFTMarketplace",
            "label": "_itemIds",
            "type": "t_struct(Counter)4256_storage",
            "src": "contracts\\NFTMarketPlace.sol:56"
          },
          {
            "contract": "NFTMarketplace",
            "label": "_tokenIds",
            "type": "t_struct(Counter)4256_storage",
            "src": "contracts\\NFTMarketPlace.sol:57"
          },
          {
            "contract": "NFTMarketplace",
            "label": "_creators",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts\\NFTMarketPlace.sol:59"
          },
          {
            "contract": "NFTMarketplace",
            "label": "items",
            "type": "t_mapping(t_uint256,t_struct(Item)5328_storage)",
            "src": "contracts\\NFTMarketPlace.sol:90"
          },
          {
            "contract": "NFTMarketplace",
            "label": "isAdmin",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts\\NFTMarketPlace.sol:91"
          },
          {
            "contract": "NFTMarketplace",
            "label": "itemBids",
            "type": "t_mapping(t_uint256,t_array(t_struct(Bid)5340_storage)dyn_storage)",
            "src": "contracts\\NFTMarketPlace.sol:92"
          },
          {
            "contract": "NFTMarketplace",
            "label": "info",
            "type": "t_struct(Info)5370_storage",
            "src": "contracts\\NFTMarketPlace.sol:107"
          }
        ],
        "types": {
          "t_struct(AddressSet)4948_storage": {
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4647_storage"
              }
            ]
          },
          "t_struct(Set)4647_storage": {
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Counter)4256_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(Item)5328_storage)": {
            "label": "mapping(uint256 => struct NFTMarketplace.Item)"
          },
          "t_struct(Item)5328_storage": {
            "label": "struct NFTMarketplace.Item",
            "members": [
              {
                "label": "id",
                "type": "t_uint256"
              },
              {
                "label": "collection",
                "type": "t_address"
              },
              {
                "label": "tokenId",
                "type": "t_uint256"
              },
              {
                "label": "mintable",
                "type": "t_bool"
              },
              {
                "label": "creator",
                "type": "t_address"
              },
              {
                "label": "uri",
                "type": "t_string_storage"
              },
              {
                "label": "count",
                "type": "t_uint256"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "currency",
                "type": "t_address"
              },
              {
                "label": "auctionable",
                "type": "t_bool"
              },
              {
                "label": "startTime",
                "type": "t_uint256"
              },
              {
                "label": "endTime",
                "type": "t_uint256"
              },
              {
                "label": "condition",
                "type": "t_struct(Condition)5331_storage"
              },
              {
                "label": "isSold",
                "type": "t_bool"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Condition)5331_storage": {
            "label": "struct NFTMarketplace.Condition",
            "members": [
              {
                "label": "requiredToken",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_uint256,t_array(t_struct(Bid)5340_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct NFTMarketplace.Bid[])"
          },
          "t_array(t_struct(Bid)5340_storage)dyn_storage": {
            "label": "struct NFTMarketplace.Bid[]"
          },
          "t_struct(Bid)5340_storage": {
            "label": "struct NFTMarketplace.Bid",
            "members": [
              {
                "label": "itemId",
                "type": "t_uint256"
              },
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "isActive",
                "type": "t_bool"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_struct(Info)5370_storage": {
            "label": "struct NFTMarketplace.Info",
            "members": [
              {
                "label": "feeAddress1",
                "type": "t_address"
              },
              {
                "label": "feeAddress2",
                "type": "t_address"
              },
              {
                "label": "tokenAddress",
                "type": "t_address"
              },
              {
                "label": "minTokenToCreate",
                "type": "t_uint256"
              },
              {
                "label": "royalty",
                "type": "t_uint256"
              },
              {
                "label": "adminFee1",
                "type": "t_uint256"
              },
              {
                "label": "adminFee2",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    }
  }
}
